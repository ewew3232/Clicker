【汎用スクリプト】
ティラノスクリプトで汎用的に使用できるスクリプト群です。
先頭に「Re」と付いているスクリプトは、要素が存在しない場合は何も行いません。

1,Scenario_Call.js
　別のksファイルを呼び出します。

2,Re_Class.js
　指定されたIDを持つ要素のclassを変更します。

3,Re_Write.js
　指定されたIDを持つ要素のテキストを変更します。

4,Re_ID.js
　指定されたIDを持つ要素のIDを変更します。

【各jsファイルの説明】
上から順に読み込まれます。

1,Variable_Load.js
　施設の基本値段や基本生産量などの定数を定義します。
　その後、localStorageに保存されている変数を読み込みます。
　読み込まれる変数は、アイテムの所持数、施設の所持数、施設の特殊係数です。

2,Total_Power.js
　「1」で受け取った定数と変数を基に、各施設の生産量を計算します。
　施設の生産量計算式は、基本生産量 * 個数 * 特殊係数 *スキル係数です。
　その後、全ての施設の生産量を合計し、1秒当たりの総生産量を計算します。

3,Variabe_Set.js
　「1」で受け取ったアイテムの所持数、各施設の所持数、「2」で計算した1秒当たりの総生産量、各施設の生産量を、html要素に代入します。

4,Next_Price_Set.js
　施設の次の値段を計算します。
　「1」で受け取ったアイテム所持数を基に、値段を計算します。
　計算式は、(一つ前の施設価格）x 1.15 です。
　その後、html要素に代入します。

5,Icon_Click.js
　アイコンがクリックされると、アイテムが増加します。
　その後、増加量がポップアップとして表示されます。
　長押しで連続タップ機能も、ここに書かれています。
　クリックされたときのアイコンのアニメーションも、ここに書かれています。

6,Item_Buy.js
　アイテム所持数が価格より多い場合、施設を購入します。
　その後、施設の生産量、次の値段を再計算し、html要素に代入します。

7,Skill.js
　各スキルを発動させます。
　スキル発動中は、演出として上から物を降らせます。
　詳しくは、同ファイル内の先頭に書かれているコメントを参照お願いします。

8,Seconds_Gain.js
　1秒ごとに、1秒当たりの生産量分、アイテム所持数に追加します。

9,Auto_Save.js
　「1」で使用する変数をlocalStorageに保存します。
　また、放置報酬の計算もここで行います。

10,Extra.js
　条件を満たしていれば、施設を強化可能にします。
　また、localStorageから受け取った各施設の特殊係数を基に、施設強化の状態をhtml要素に代入します。

11,Bonus.js
　画面左部に定期的にボーナスアイコンを発生させます。

12,Display.js
　ゲームの進行状況に合わせて、html要素を表示、非表示させます。
　一定時間ごとに判定を行い、条件を満たしている場合、要素が表示されます。